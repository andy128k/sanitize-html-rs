use super::{Rules, Element, Attribute};

pub fn basic() -> Rules {
    Rules::new()
        .element(Element::new("a")
            .attribute(Attribute::new("href")
                .should_match("^(ftp:|http:|https:|mailto:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
        )
        .element(Element::new("abbr")
            .attribute(Attribute::new("title"))
        )
        .element(Element::new("b"))
        .element(Element::new("blockquote")
            .attribute(Attribute::new("cite")
                .should_match("^(http:|https:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
        )
        .element(Element::new("br"))
        .element(Element::new("br"))
        .element(Element::new("cite"))
        .element(Element::new("code"))
        .element(Element::new("dd"))
        .element(Element::new("dfn")
            .attribute(Attribute::new("title"))
        )
        .element(Element::new("dl"))
        .element(Element::new("dt"))
        .element(Element::new("em"))
        .element(Element::new("i"))
        .element(Element::new("kbd"))
        .element(Element::new("li"))
        .element(Element::new("mark"))
        .element(Element::new("ol"))
        .element(Element::new("p"))
        .element(Element::new("pre"))
        .element(Element::new("q")
            .attribute(Attribute::new("cite")
                .should_match("^(http:|https:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
        )
        .element(Element::new("s"))
        .element(Element::new("samp"))
        .element(Element::new("small"))
        .element(Element::new("strike"))
        .element(Element::new("strong"))
        .element(Element::new("sub"))
        .element(Element::new("sup"))
        .element(Element::new("time")
            .attribute(Attribute::new("datetime"))
            .attribute(Attribute::new("pubdate"))
        )
        .element(Element::new("u"))
        .element(Element::new("ul"))
        .element(Element::new("var"))
        .space("address")
        .space("article")
        .space("aside")
        .space("div")
        .space("footer")
        .space("h1")
        .space("h2")
        .space("h3")
        .space("h4")
        .space("h5")
        .space("h6")
        .space("header")
        .space("hgroup")
        .space("hr")
        .space("nav")
        .space("section")
}

pub fn default() -> Rules {
    Rules::new()
        .space("address")
        .space("article")
        .space("aside")
        .space("blockquote")
        .space("br")
        .space("dd")
        .space("div")
        .space("dl")
        .space("dt")
        .space("footer")
        .space("h1")
        .space("h2")
        .space("h3")
        .space("h4")
        .space("h5")
        .space("h6")
        .space("header")
        .space("hgroup")
        .space("hr")
        .space("li")
        .space("nav")
        .space("ol")
        .space("p")
        .space("pre")
        .space("section")
        .space("ul")
}

pub fn relaxed() -> Rules {
    fn relaxed_element(name: &str) -> Element {
        Element::new(name)
            .attribute(Attribute::new("dir"))
            .attribute(Attribute::new("lang"))
            .attribute(Attribute::new("title"))
            .attribute(Attribute::new("class"))
    }

    Rules::new()
        .element(relaxed_element("a")
            .attribute(Attribute::new("href")
                .should_match("^(ftp:|http:|https:|mailto:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
        )
        .element(relaxed_element("abbr"))
        .element(relaxed_element("b"))
        .element(relaxed_element("bdo"))
        .element(relaxed_element("blockquote")
            .attribute(Attribute::new("cite")
                .should_match("^(http:|https:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
        )
        .element(relaxed_element("br"))
        .element(relaxed_element("caption"))
        .element(relaxed_element("cite"))
        .element(relaxed_element("code"))
        .element(relaxed_element("col")
            .attribute(Attribute::new("span"))
            .attribute(Attribute::new("width"))
        )
        .element(relaxed_element("colgroup")
            .attribute(Attribute::new("span"))
            .attribute(Attribute::new("width"))
        )
        .element(relaxed_element("dd"))
        .element(relaxed_element("del")
            .attribute(Attribute::new("cite")
                .should_match("^(http:|https:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
            .attribute(Attribute::new("datetime"))
        )
        .element(relaxed_element("dfn"))
        .element(relaxed_element("dl"))
        .element(relaxed_element("dt"))
        .element(relaxed_element("em"))
        .element(relaxed_element("figcaption"))
        .element(relaxed_element("figure"))
        .element(relaxed_element("h1"))
        .element(relaxed_element("h2"))
        .element(relaxed_element("h3"))
        .element(relaxed_element("h4"))
        .element(relaxed_element("h5"))
        .element(relaxed_element("h6"))
        .element(relaxed_element("hgroup"))
        .element(relaxed_element("i"))
        .element(relaxed_element("img")
            .attribute(Attribute::new("src")
                .should_match("^(http:|https:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
            .attribute(Attribute::new("align"))
            .attribute(Attribute::new("alt"))
            .attribute(Attribute::new("width"))
            .attribute(Attribute::new("height"))
        )
        .element(relaxed_element("ins")
            .attribute(Attribute::new("cite")
                .should_match("^(http:|https:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
            .attribute(Attribute::new("datetime"))
        )
        .element(relaxed_element("kbd"))
        .element(relaxed_element("li"))
        .element(relaxed_element("mark"))
        .element(relaxed_element("ol")
            .attribute(Attribute::new("start"))
            .attribute(Attribute::new("reversed"))
            .attribute(Attribute::new("type"))
        )
        .element(relaxed_element("p"))
        .element(relaxed_element("pre"))
        .element(relaxed_element("q")
            .attribute(Attribute::new("cite")
                .should_match("^(http:|https:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
        )
        .element(relaxed_element("rp"))
        .element(relaxed_element("rt"))
        .element(relaxed_element("ruby"))
        .element(relaxed_element("s"))
        .element(relaxed_element("samp"))
        .element(relaxed_element("small"))
        .element(relaxed_element("strike"))
        .element(relaxed_element("strong"))
        .element(relaxed_element("sub"))
        .element(relaxed_element("sup"))
        .element(relaxed_element("table")
            .attribute(Attribute::new("summary"))
            .attribute(Attribute::new("width"))
        )
        .element(relaxed_element("tbody"))
        .element(relaxed_element("td")
            .attribute(Attribute::new("abbr"))
            .attribute(Attribute::new("axis"))
            .attribute(Attribute::new("colspan"))
            .attribute(Attribute::new("rowspan"))
            .attribute(Attribute::new("width"))
        )
        .element(relaxed_element("tfoot"))
        .element(relaxed_element("th")
            .attribute(Attribute::new("abbr"))
            .attribute(Attribute::new("axis"))
            .attribute(Attribute::new("colspan"))
            .attribute(Attribute::new("rowspan"))
            .attribute(Attribute::new("scope"))
            .attribute(Attribute::new("width"))
        )
        .element(relaxed_element("thead"))
        .element(relaxed_element("time")
            .attribute(Attribute::new("datetime"))
            .attribute(Attribute::new("pubdate"))
        )
        .element(relaxed_element("tr"))
        .element(relaxed_element("u"))
        .element(relaxed_element("ul")
            .attribute(Attribute::new("type"))
        )
        .element(relaxed_element("var"))
        .element(relaxed_element("wbr"))

        .space("address")
        .space("article")
        .space("aside")
        .space("footer")
        .space("header")
        .space("hr")
        .space("nav")
        .space("section")
}

pub fn restricted() -> Rules {
    Rules::new()
        .element(Element::new("b"))
        .element(Element::new("em"))
        .element(Element::new("i"))
        .element(Element::new("strong"))
        .element(Element::new("u"))
        .space("address")
        .space("article")
        .space("aside")
        .space("blockquote")
        .space("br")
        .space("dd")
        .space("div")
        .space("dl")
        .space("dt")
        .space("footer")
        .space("h1")
        .space("h2")
        .space("h3")
        .space("h4")
        .space("h5")
        .space("h6")
        .space("header")
        .space("hgroup")
        .space("hr")
        .space("li")
        .space("nav")
        .space("ol")
        .space("p")
        .space("pre")
        .space("section")
        .space("ul")
}

pub fn untrusted() -> Rules {
    Rules::new()
        .element(Element::new("a")
            .attribute(Attribute::new("href")
                .should_match("^(ftp:|http:|https:|mailto:)").unwrap()
                .should_not_match("^[^/]+[[:space:]]*:").unwrap()
            )
            .mandatory_attribute("target", "_blank")
            .mandatory_attribute("rel", "noreferrer noopener")
        )
        .element(Element::new("b"))
        .element(Element::new("em"))
        .element(Element::new("i"))
        .element(Element::new("strong"))
        .element(Element::new("u"))
        .space("address")
        .space("article")
        .space("aside")
        .space("blockquote")
        .space("br")
        .space("dd")
        .space("div")
        .space("dl")
        .space("dt")
        .space("footer")
        .space("h1")
        .space("h2")
        .space("h3")
        .space("h4")
        .space("h5")
        .space("h6")
        .space("header")
        .space("hgroup")
        .space("hr")
        .space("li")
        .space("nav")
        .space("ol")
        .space("p")
        .space("pre")
        .space("section")
        .space("ul")
}

#[cfg(test)]
mod tests {
    use super::{basic, default, relaxed, restricted, untrusted};

    #[test]
    fn basic_does_not_fail() {
        let rules = basic();
        assert_eq!(rules.allowed_elements.len(), 31);
    }

    #[test]
    fn default_does_not_fail() {
        let rules = default();
        assert_eq!(rules.allowed_elements.len(), 0);
        assert_eq!(rules.space_elements.len(), 26);
    }

    #[test]
    fn relaxed_does_not_fail() {
        let rules = relaxed();
        assert_eq!(rules.allowed_elements.len(), 58);
        assert_eq!(rules.space_elements.len(), 8);
    }

    #[test]
    fn restricted_does_not_fail() {
        let rules = restricted();
        assert_eq!(rules.allowed_elements.len(), 5);
        assert_eq!(rules.space_elements.len(), 26);
    }

    #[test]
    fn untrusted_does_not_fail() {
        let rules = untrusted();
        assert_eq!(rules.allowed_elements.len(), 6);
        assert_eq!(rules.space_elements.len(), 26);
    }
}
